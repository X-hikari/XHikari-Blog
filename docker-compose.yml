services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    env_file: .env
    command: bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./backend:/app
    ports:
      - "8001:8000"
    depends_on:
      - db
      - redis

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules  # 这一行阻止宿主机覆盖容器内的 node_modules
    ports:
      - "3000:5173"
    command: npm run dev

  db:
    image: mysql:8
    restart: always
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  celery:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: celery -A blog.celery_api worker --loglevel=info
    volumes:
      - ./backend:/app
    depends_on:
      - backend
      - redis
    env_file: .env

volumes:
  mysql-data:
